# Chunk 1: Load packages
## vector with package names
x <- c( "pbapply", "parallel", "ggplot2", "warbleR", "Rraven", "viridis", "readxl", "rptR", "MCMCglmm", "MuMIn", "corrplot", "lme4", "grid", "gridExtra")
aa <- lapply(x, function(y) {
# check if installed, if not then install
if (!y %in% installed.packages()[,"Package"])
install.packages(y)
# load package
try(require(y, character.only = T), silent = T)
})
# Chunk 2: functions and parameters
#functions and parameters
knitr::opts_knit$set(root.dir = normalizePath(".."))
knitr::opts_chunk$set(dpi = 50, fig.width = 12, warning = FALSE, message = FALSE)
# ggplot2 theme
# theme_set(theme_classic(base_size = 20))
cut_path <- "./data/raw/cuts"
treatments <- c("Calibration", "Regular_singing", "Coordination", "After_chase",
"Before_playback", "After_playback", "Before_interaction", "After_interaction", "Before_noise", "After_noise")
# iterations for MCMCglmm models
itrns <- 100000
# functions from https://rdrr.io/rforge/rptR/src/R/rpt.mcmcLMM.R
rpt.mcmcLMM <- function(y, groups, CI=0.95, prior=NULL, verbose=FALSE, ...){
# initial checks
if(length(y)!= length(groups)) stop("y and group are of unequal length")
# preparation
groups <- factor(groups)
if(is.null(prior)) prior <- list(R=list(V=1,n=10e-2), G=list(G1=list(V=1,n=10e-2)) )
# point estimation according to model 8 and equation 9
mod   <- MCMCglmm(y ~ 1, random=~groups, family="gaussian", data=data.frame(y=y,groups=groups), prior=prior, verbose=verbose, ...)
var.a <- mod$VCV[,"groups"]
var.e <- mod$VCV[,"units"]
postR <- var.a / (var.a + var.e)
# point estimate
R     <- posterior.mode( postR )
# credibility interval estimation from paterior distribution
CI.R    <- coda::HPDinterval(postR,CI)[1,]
se 	    <- sd(postR)
# 'significance test'
P 	  <- NA
res = list(call=match.call(), datatype="Gaussian", method="LMM.MCMC", CI=CI,
R=R, CI.R=CI.R, se=se, P=P)
# class(res) <- "rpt"
return(res)
}
## print Gelman-Rubin convergence statistics, plots traces and autocorrelations
mcmc_diagnostics <- function(rep_mods_list){
for(w in 1:length(rep_mods_list))
{
mod_name <- names(rep_mods_list)[w]
if(mod_name == "1") mod_name <- "Null"
print(paste("model:", mod_name))
Y <- lapply(rep_mods_list[[w]], "[[", "Sol")
## add global plots and gelman test
# gelman_diagnostic
gel_diag <- as.data.frame(gelman.diag(mcmc.list(Y))$psrf)
# add estimate as column
gel_diag$estimate <- rownames(gel_diag)
# reorder columns
gel_diag <- gel_diag[, c(3, 1, 2)]
par(mfrow = c(1, 1))
# plot table
grid.newpage()
grid.draw(tableGrob(gel_diag, rows = NULL, theme=ttheme_default(base_size = 25)))
par(mfrow = c(1, 4))
traceplot(Y, col = adjustcolor(c("yellow","blue", "red"), alpha.f = 0.6))
autocorr.plot(x = Y[[1]], auto.layout = FALSE, lwd =4, col = "red")
}
}
# Chunk 3: read data
amp <- read.csv("./output/calibrated_amplitude_all_songs.csv")
amp$Treatment[amp$Treatment == "Regular_sining"] <- "Regular_singing"
# Chunk 5: repeatability plot
repts_df <- read.csv("./output/repeatability_optimization.csv")
pd <- position_dodge(width = 0.1)
ggplot(data = repts_df, aes(x = 1 - max_quantile, y = repeatability, color = only.low.outliers, group = only.low.outliers)) +
geom_hline(yintercept = 0.5, col = adjustcolor("red", alpha.f = 0.5)) +
geom_point(size = 2, position = pd) +
geom_errorbar(width=.05, aes(ymin = lowCI, ymax = hiCI), position = pd) +
scale_color_viridis(discrete = TRUE, begin = 0.2, end = 0.8, alpha = 0.7) +
geom_line(position = pd) +
labs(y = "Repeatability",  x = "Upper quantile used") +
ylim(c(0, 1)) + xlim(c(1, 0)) +
facet_wrap(~ outliers, scales = "fixed") +
theme_classic(base_size = 24)
repts_df$range <- repts_df$hiCI - repts_df$lowCI
# repts_df[order(repts_df$repeatability), c("max_quantile", "outliers", "only.low.outliers", "repeatability", "range")]
repts_df <- repts_df[order(repts_df$repeatability, decreasing = TRUE), ]
kable(head(repts_df))
# Chunk 6: apply subseting based on repeatability
# compose variable to remove low values and outliers based on repeatabiliy
amp$osf.treat <- paste(amp$org.sound.file, amp$Treatment, sep = "-")
rm_outlier_amp_l <- lapply(unique(amp$osf.treat), function(y){
X <- amp[amp$osf.treat == y, ]
# remove outliers
outlier_quant <- quantile(X$cal.spl, c(repts_df$outliers[1], 1))
X <- X[X$cal.spl >= outlier_quant[1] & X$cal.spl <= outlier_quant[2],]
# quantlie for each max quantile (0.6 was selected due to high repeatability)
quant <- quantile(X$cal.spl, probs = repts_df$max_quantile[1])
# subset
X <- X[X$cal.spl >= quant, ]
})
rm_outlier_amp <- do.call(rbind, rm_outlier_amp_l)
# Chunk 8: SPL vs period model selection
attach(readRDS("./output/mcmcglmm_period_models.RDS"))
mod_list <- lapply(period_mods, "[[", 1)
names(mod_list) <- gsub("cal.spl ~ ", "", period_formulas)
model_selection <- model.sel(mod_list, rank="DIC")
model_selection
# Chunk 9: SPL vs period effect size
# fixed effects with HPD intervals
best_mod_period <- period_mods[[which(names(period_mods) == row.names(model_selection)[1])]][[1]]
sm <- as.data.frame(summary(best_mod_period)$solutions[, -5])
sm
dat_period <- rm_outlier_amp[rm_outlier_amp$Treatment == "Regular_singing" & rm_outlier_amp$ID %in% unique(rm_outlier_amp$ID[rm_outlier_amp$period == "afternoon"]), ]
dat_period$period <- factor(dat_period$period, levels = c("morning", "afternoon"))
ggplot(dat_period, aes(x = as.factor(ID), y = cal.spl, color = period, fill = period)) +
geom_violin(position =  pd) +
labs(x = "Individual", y = "Sound pressure level (dB)", fill = "Period") +
scale_color_viridis_d(begin = 0.1, end = 0.8, alpha = 0.6) +
scale_fill_viridis_d(begin = 0.1, end = 0.8, alpha = 0.6) +
guides(color = FALSE) +
theme_classic(base_size = 24)
ggplot(dat_period, aes(x = as.factor(ID), y = cal.spl, color = period, fill = period)) +
geom_violin(position =  pd) +
labs(x = "Individual", y = "Sound pressure level (dB)", fill = "Period") +
scale_color_viridis_d(begin = 0.1, end = 0.8, alpha = 0.6) +
scale_fill_viridis_d(begin = 0.1, end = 0.8, alpha = 0.6) +
guides(color = FALSE) +
theme_classic(base_size = 30)
ggplot(dat_period, aes(x = as.factor(ID), y = cal.spl, color = period, fill = period)) +
geom_violin(position =  pd) +
labs(x = "Individual", y = "Sound pressure level (dB)", fill = "Period") +
scale_color_viridis_d(begin = 0.1, end = 0.8) +
scale_fill_viridis_d(begin = 0.1, end = 0.8) +
guides(color = FALSE) +
theme_classic(base_size = 30)
ggplot(dat_period, aes(x = as.factor(ID), y = cal.spl, fill = period)) +
geom_violin(position =  pd) +
labs(x = "Individual", y = "Sound pressure level (dB)", fill = "Period") +
# scale_color_viridis_d(begin = 0.1, end = 0.8) +
scale_fill_viridis_d(begin = 0.1, end = 0.8) +
guides(color = FALSE) +
theme_classic(base_size = 30)
ggsave("./output/uncalibrated_audiomoth_spl.jpeg", width = 11, height = 7)
ggsave("./output/spl_time_of_day.jpeg", width = 11, height = 7)
# Chunk 1: Load packages
## vector with package names
x <- c( "pbapply", "parallel", "ggplot2", "warbleR", "Rraven", "readxl", "Sim.DiffProc", "png", "baRulho", "viridis", "sysfonts")
aa <- lapply(x, function(y) {
# check if installed, if not then install
if (!y %in% installed.packages()[,"Package"])
install.packages(y)
# load package
try(require(y, character.only = T), silent = T)
})
knitr::opts_knit$set(root.dir = normalizePath(".."), warnings = FALSE, message = FALSE)
knitr::opts_chunk$set(warnings = FALSE, message = FALSE)
font_add(family = "Calibri light", regular = "./data/calibril.ttf")
# Chunk 2
calibration.path <- "./data/raw/calibration"
# parameters for calibration
f = 48
reps <- 5
gap.dur <- 1
# for ggplots
pd <- position_dodge(0.1)
lseq <- function(from=1, to=100000, length.out=6) {
# logarithmic spaced sequence
# blatantly stolen from library("emdbook"), because need only this
exp(seq(log(from), log(to), length.out = length.out))
}
decrease <- (1 / lseq(length.out = 11))[-11]
wav_dur <- wavdur
detec_saturation <- function(X, parallel = 1, bit = 16, max_amplitude = NULL, path = NULL){
if (is.null(max_amplitude))
max_amplitude <- max((2 ^ bit) / 2) - 1
out <- pblapply(1:nrow(X), cl = parallel, function(x){
wv <- read_wave(X, index = x, path = path)
out_df <- data.frame(sound.files = X$sound.files[x], selec = X$selec[x], prop.saturated = sum(wv@left == max_amplitude) / length(wv@left))
return(out_df)
})
sat_df <- do.call(rbind, out)
if (any(sat_df$prop.saturated > 0.2))
cat(crayon::magenta(paste(sum(sat_df$prop.saturated > 0.2), "selections look saturated (i.e. > 20% of amplitude samples reached the highest value)")))
if (any(all(sat_df$prop.saturated < 0.2) & any(sat_df$prop.saturated > 0.05)))
cat(crayon::magenta(paste(sum(sat_df$prop.saturated > 0.05), "selections with some degree of saturation (i.e. < 20% but  > 5% of amplitude samples reached the highest value)")))
if (all(sat_df$prop.saturated < 0.05))
cat(crayon::silver("no saturation detected (all selections < 5% of amplitude samples reached the highest value)"))
return(sat_df)
}
# Chunk 7: measuring sound pressure on soundmeter calibration sound
calb <- read_excel(file.path(calibration.path, "soundmeter_calibration.xls"))
plot(1:100, calb$`Noise(dB)`[1:100], xlab = "Time (s)", ylab = "SPL (dB)", col = viridis(10)[3], pch = 20, cex = 2)
# xys <- locator(1)
dbdf <- data.frame(dB =calb$`Noise(dB)`[rep(seq(1, 2000, 6) + 8, each = 3) + 0:2])
dbdf$label <- rep(rep(round(decrease, 5), each = 3), 40)[1:nrow(dbdf)]
# select those that match noise (the rest (> 450) don't match labels)
dbdf <- dbdf[1:450,]
agg_spl_sm <- aggregate(dB ~ label, data = dbdf, mean)
agg_spl_sm$sd <- aggregate(dB ~ label, data = dbdf, sd)$dB
agg_spl_sm$sound.files <- "soundmeter"
agg_spl_sm$label <- c(0.0000, 0.0010, 0.0032, 0.0100, 0.0316, 0.1000, 0.3162, 1.0000, 0.0001, 0.0003)
# Chunk 8: measuring sound pressure on soundmeter calibration sound 2
agg_spl_sm$label_cat <- factor(agg_spl_sm$label, levels = agg_spl_sm$label)
ggplot(agg_spl_sm, aes(x = label_cat, y = dB, color = sound.files)) +
geom_errorbar(aes(ymin = dB - sd, ymax = dB + sd),width=.4, position=pd) +
geom_line(position=pd) +
scale_color_viridis_d(begin = 0.2, end =  0.8) +
geom_point(position=pd, size = 2) +
theme_classic() + labs(x = "Calibration sound decrease factor", y = "SPL (dB)")
# Chunk 13: plotting audiomoth calibration dBs
agg_spl <- read.csv(file.path(calibration.path, "spl_by_audiomoth_calibration_sounds.csv"))
names(agg_spl)[3] <- "dB"
agg_spl_sm$label_cat <- NULL
agg_spl_all <- rbind(agg_spl_sm, agg_spl)
agg_spl_all$orig.dB <- factor(agg_spl_all$label, levels = unique(agg_spl_all$label))
ggplot(agg_spl_all[agg_spl_all$sound.files %in% c("soundmeter", unique(agg_spl_all$sound.files)[2:6]), ], aes(x = orig.dB, y = dB, group = sound.files, color = sound.files)) +
geom_errorbar(aes(ymin=dB - sd, ymax = dB + sd), colour="black", width=.2, position=pd) +
scale_color_viridis_d() +
geom_line(position=pd) +
geom_point(position=pd, size=1) +
theme_classic() + labs(x = "Calibration sound")
ggplot(agg_spl_all[agg_spl_all$sound.files %in% c("soundmeter", unique(agg_spl_all$sound.files)[7:10]), ], aes(x = orig.dB, y = dB, group = sound.files, color = sound.files)) +
geom_errorbar(aes(ymin=dB - sd, ymax = dB + sd), colour="black", width=.2, position=pd) +
scale_color_viridis_d() +
geom_line(position=pd) +
geom_point(position=pd, size=1) +
theme_classic() + labs(x = "Calibration sound")
ggplot(agg_spl_all[agg_spl_all$sound.files %in% c("soundmeter", unique(agg_spl_all$sound.files)[11:16]), ], aes(x = orig.dB, y = dB, group = sound.files, color = sound.files)) +
geom_errorbar(aes(ymin=dB - sd, ymax = dB + sd), colour="black", width=.2, position=pd) +
scale_color_viridis_d() +
geom_line(position=pd) +
geom_point(position=pd, size=1) +
theme_classic() + labs(x = "Calibration sound")
agg_spl_all$am <- as.character(as.numeric(as.factor(agg_spl_all$sound.files)))
agg_spl_all$am[agg_spl_all$sound.files == "soundmeter"] <- "soundmeter"
agg_spl_all$am <- factor(agg_spl_all$am, levels = c("soundmeter", 1:16))
agg_spl_all$line.size <- ifelse(agg_spl_all$am == "soundmeter", 2, 1)
ggplot(agg_spl_all[agg_spl_all$orig.dB %in% c(0.0316, 0.1, 0.3162, 1), ], aes(x = orig.dB, y = dB, group = am, color = am, size = line.size)) +
geom_errorbar(aes(ymin= dB - sd, ymax = dB + sd, color = am),width=.2, position=pd) +
geom_line(position=pd) +
scale_color_viridis_d() +
geom_point(position=pd, size=1) +
theme_classic(base_size = 30) + labs(x = "Calibration sound SPL (dB)", y = "SPL measured (dB)", color = "") + guides(size = "none")
ggsave("./output/uncalibrated_audiomoth_spl.jpeg", width = 11, height = 7)
